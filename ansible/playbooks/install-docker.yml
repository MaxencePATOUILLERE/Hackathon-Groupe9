---
- name: Clean & Install Docker CE (Debian/Ubuntu)
  hosts: manager, worker
  become: true
  gather_facts: true

  vars:
    docker_purge_data: false
    docker_pkg_state: present
    docker_sysctl:
      net.ipv4.ip_forward: 1
      net.bridge.bridge-nf-call-iptables: 1
      net.bridge.bridge-nf-call-ip6tables: 1
    docker_daemon_json:
      log-driver: "json-file"
      log-opts:
        max-size: "10m"
        max-file: "3"
      exec-opts:
        - "native.cgroupdriver=systemd"
      storage-driver: "overlay2"
      features:
        buildkit: true

  pre_tasks:
    - name: Stop docker/containerd if running
      ansible.builtin.service:
        name: "{{ item }}"
        state: stopped
        enabled: false
      loop: [docker, containerd]
      ignore_errors: true
      when: ansible_facts['os_family'] == "Debian"


    - name: Remove any docker*.list in sources.list.d
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/apt/sources.list.d/docker.list
        - /etc/apt/sources.list.d/docker-ce.list
        - /etc/apt/sources.list.d/docker-ce-stable.list
      when: ansible_facts['os_family'] == "Debian"

    - name: Remove any docker.com lines from /etc/apt/sources.list
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list
        regexp: '^.*download\.docker\.com.*$'
        state: absent
      when: ansible_facts['os_family'] == "Debian"

    - name: Ensure base repo tools (Debian/Ubuntu)
      ansible.builtin.apt:
        update_cache: true
        state: present
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
      when: ansible_facts['os_family'] == "Debian"

    - name: Ensure /etc/apt/keyrings exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"
      when: ansible_facts['os_family'] == "Debian"

    - name: Install Docker GPG key
      ansible.builtin.get_url:
        url: "https://download.docker.com/linux/{{ ansible_facts['distribution'] | lower }}/gpg"
        dest: /etc/apt/keyrings/docker.asc
        mode: "0644"
      when: ansible_facts['os_family'] == "Debian"

    - name: Add Docker CE APT repo (single, clean, with signed-by)
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ ansible_facts['architecture'] | default('amd64') }} signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/{{ ansible_facts['distribution'] | lower }} {{ ansible_facts['lsb']['codename'] | default(ansible_facts['distribution_release']) }} stable"
        filename: "docker"
        state: present
      when: ansible_facts['os_family'] == "Debian"

    - name: apt update after repo fix
      ansible.builtin.apt:
        update_cache: true
      when: ansible_facts['os_family'] == "Debian"

  tasks:
    # --- Purge ancienne install (paquets legacy) ---
    - name: Remove legacy Docker packages
      ansible.builtin.apt:
        name:
          - docker
          - docker-engine
          - docker.io
          - containerd
          - runc
        state: absent
        purge: true
      when: ansible_facts['os_family'] == "Debian"

    - name: Optionally purge Docker data (⚠️ destructive)
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /var/lib/docker
        - /var/lib/containerd
        - /etc/docker
      when:
        - ansible_facts['os_family'] == "Debian"
        - docker_purge_data
      tags: ['purge']

    # --- Install Docker CE depuis le repo officiel ---
    - name: Install Docker CE packages
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: "{{ docker_pkg_state }}"
        update_cache: true
      when: ansible_facts['os_family'] == "Debian"

    # --- Réglages kernel/networking utiles ---
    - name: Ensure kernel modules are present
      ansible.builtin.modprobe:
        name: "{{ item }}"
        state: present
      loop: [overlay, br_netfilter]
      ignore_errors: true

    - name: Persist kernel modules
      ansible.builtin.copy:
        dest: /etc/modules-load.d/docker.conf
        mode: "0644"
        content: |
          overlay
          br_netfilter

    - name: Apply Docker-related sysctls
      ansible.builtin.copy:
        dest: /etc/sysctl.d/99-docker.conf
        mode: "0644"
        content: |
          {% for k, v in docker_sysctl.items() -%}
          {{ k }} = {{ v }}
          {% endfor -%}

    - name: sysctl --system (apply)
      ansible.builtin.command: sysctl --system
      changed_when: false

    # --- Config daemon.json propre ---
    - name: Ensure /etc/docker exists
      ansible.builtin.file:
        path: /etc/docker
        state: directory
        mode: "0755"

    - name: Write /etc/docker/daemon.json
      ansible.builtin.copy:
        dest: /etc/docker/daemon.json
        mode: "0644"
        content: "{{ docker_daemon_json | to_nice_json }}"

    # --- Services ---
    - name: Enable & start containerd
      ansible.builtin.service:
        name: containerd
        state: started
        enabled: true

    - name: Enable & start docker
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

  post_tasks:
    - name: Verify docker info
      ansible.builtin.command: docker info
      register: docker_info
      changed_when: false
      failed_when: docker_info.rc != 0

    - name: Show docker version & runtime
      ansible.builtin.debug:
        msg:
          - "{{ docker_info.stdout_lines | default([]) | select('match','^(Server|Client| Cgroup| Storage Driver|Logging Driver)') | list }}"
          - "Hint: use 'ansible -m command -a \"docker version\" docker_nodes' for details"